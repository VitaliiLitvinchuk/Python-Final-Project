from typing import Annotated, List

from fastapi import Depends, HTTPException

from common.services.genai_service import GenaiServiceDependency
from crud.platform_repository import PlatformRepositoryDependency
from crud.product_repository import ProductRepositoryDependency
from crud.scraped_product_data_repository import ScrapedProductDataRepositoryDependency
from models.scraped_product_data import ScrapedProductData
from utils.bs4.extract_product_data import extract_product_data
from utils.genai.normalize_json import normalize_json
from playwright.async_api import async_playwright


class ScrapeService:
    def __init__(
        self,
        platform_repository: PlatformRepositoryDependency,
        product_repository: ProductRepositoryDependency,
        scraped_product_data_repository: ScrapedProductDataRepositoryDependency,
        genai_service: GenaiServiceDependency,
    ):
        self.platform_repository = platform_repository
        self.product_repository = product_repository
        self.scraped_product_data_repository = scraped_product_data_repository
        self.genai_service = genai_service

    async def scrape(self, product_id: int, platforms_ids: List[int]):
        browser = None
        scraped_products: List[ScrapedProductData] = []
        try:
            async with async_playwright() as p:
                browser = await p.chromium.launch(
                    headless=True,
                    args=[
                        "--disable-extensions",
                        "--proxy-server='direct://'",
                        "--proxy-bypass-list=*",
                        "--disable-gpu",
                        "--disable-dev-shm-usage",
                        "--no-sandbox",
                        "--disable-setuid-sandbox",
                        "--disable-web-security",
                    ],
                )
                page = await browser.new_page()
                product = await self.product_repository.get_by_id(product_id)
                if product is None:
                    raise ValueError(f"Product with id {product_id} not found")
                search = product.global_query_name
                if len(platforms_ids) == 0:
                    platforms_ids = (
                        await self.platform_repository.get_all_platforms_ids()
                    )
                platforms = await self.platform_repository.get_platforms_by_ids(
                    platforms_ids
                )
                parsed = []
                for platform in platforms:
                    response = await self.genai_service.analyze_page(
                        platform.search_url_template.replace("{search}", search),  # type: ignore
                        """
                        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É —Ç–∞ –ø–æ–±—É–¥—É–π JSON-–æ–±‚Äô—î–∫—Ç —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:
                        {
                        "products": [
                            {
                            "link": "absolute URL to product page",
                            "search_position": 1
                            },
                            {
                            "link": "absolute URL to product page",
                            "search_position": 2
                            },
                            ...
                        ]
                        }
                        üîπ **link** ‚Äî –ø–æ–≤–Ω–µ (–∞–±—Å–æ–ª—é—Ç–Ω–µ) –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ–¥—É–∫—Ç—É  
                        üîπ **search_position** ‚Äî –ø–æ–∑–∏—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç—É —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ—à—É–∫—É, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 1
                        ---
                        üéØ **–í–∏–º–æ–≥–∏ –¥–æ –≤–∏–±—ñ—Ä–∫–∏**:
                        - –û–±—Ä–æ–±–ª—è–π **–ª–∏—à–µ –≥–æ–ª–æ–≤–Ω–∏–π –±–ª–æ–∫ —ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—à—É–∫—É** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤, –≥—Ä—ñ–¥ –∞–±–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤).
                        - –Ü–≥–Ω–æ—Ä—É–π –±–∞–Ω–µ—Ä–∏, —Ä–µ–∫–ª–∞–º—É, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏, –∫–∞—Ä—É—Å–µ–ª—ñ —Ç–∞ —ñ–Ω—à—ñ –¥—Ä—É–≥–æ—Ä—è–¥–Ω—ñ –±–ª–æ–∫–∏.
                        - –í–∏—Ç—è–≥—É–π **—Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ (–≤–∏–¥–∏–º—ñ) –ø—Ä–æ–¥—É–∫—Ç–∏** ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω—ñ/–ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏.
                        - –ù–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ `null` —É –ø–æ–ª—è—Ö (`link`, `search_position` –º–∞—é—Ç—å –±—É—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –π –≤–∞–ª—ñ–¥–Ω—ñ).
                        - –ü–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ (–¥–æ–¥–∞–≤–∞–π `base_url`, —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—î —É `href`).
                        ---
                        üìå –ü–æ–≤–µ—Ä–Ω–∏ **–ª–∏—à–µ –æ–±'—î–∫—Ç JSON** –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
                        """,
                    )
                    parsed_json = normalize_json(response)
                    parsed_json["platform_id"] = str(platform.id)
                    parsed.append(parsed_json)
                if len(parsed) == 0:
                    raise HTTPException(status_code=404, detail="No products found")
                for parse in parsed:
                    url = parse["products"][0]["link"]
                    raw_selectors = await self.genai_service.analyze_page(
                        url,
                        """
                        –ù–∞–¥–∞–π —Å—Ç–∞–±—ñ–ª—å–Ω—ñ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä–∏ (–∫–ª–∞—Å–∏, ID –∞–±–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏) –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ Playwright. –û—á—ñ–∫—É—î—Ç—å—Å—è –æ–±'—î–∫—Ç —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:
                        {
                        "title_selector": "CSS selector for product name",
                        "price_selector": "CSS selector for product price",
                        "currency_selector": "CSS selector for currency symbol",
                        "rating_selector": "Either a CSS selector for numeric rating OR an object { \"selector\": \"...\", \"percent_attribute\": \"...\" }",
                        "reviews_count_selector": "CSS selector for number of feedbacks/feedbacks and questions",
                        "availability_selector": "CSS selector for availability status"
                        "charecteristics": "CSS selector for button/link of expand characteristics"
                        }
                        üîπ **title_selector** ‚Äî –Ω–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É
                        üîπ **price_selector** ‚Äî —Ü—ñ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—É
                        üîπ **currency_selector** ‚Äî –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "$", "‚Ç¥", "‚Ç¨")
                        üîπ **rating_selector**:
                        - –Ø–∫—â–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤–∫–∞–∑–∞–Ω–æ —á–∏—Å–ª–æ–º ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–æ —Ü—å–æ–≥–æ —á–∏—Å–ª–∞.
                        - –Ø–∫—â–æ —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —è–∫ –≤—ñ–¥—Å–æ—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ `style="width:80%"`) ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ –æ–±'—î–∫—Ç:
                            {
                            "selector": "CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞",
                            "percent_attribute": "–Ω–∞–∑–≤–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, style)"
                            }
                        üîπ **reviews_count_selector** ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤
                        üîπ **availability_selector** ‚Äî —Ç–µ–∫—Å—Ç –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", "–û—á—ñ–∫—É—î—Ç—å—Å—è", "–ù–µ–º–∞—î")
                        üîπ **charecteristics** ‚Äî CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏/–ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                        ---
                        üéØ **–í–∏–º–æ–≥–∏**:
                        - –ü–µ—Ä–µ–≤–∞–≥–∞ –Ω–∞–¥–∞—î—Ç—å—Å—è **—Å—Ç–∞–±—ñ–ª—å–Ω–∏–º –∫–ª–∞—Å–∞–º** –∞–±–æ ID (–±–µ–∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ —Å—Ç–∞–Ω—É —á–∏ –∫–æ–ª—å–æ—Ä—É).
                        - ‚ùå –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ —Å—Ç–∞–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `green`, `red`, `disabled`)
                        - ‚ùå –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–µ–≥–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `<rz-stars-rating-progress>`) ‚Äî –ª–∏—à–µ –∫–ª–∞—Å–∏ –∞–±–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–æ—á—ñ—Ä–Ω—ñ—Ö HTML-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
                        - üîç –°–µ–ª–µ–∫—Ç–æ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ **–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏, —Ç–æ—á–Ω–∏–º–∏ —ñ –ø—Ä–∏–¥–∞—Ç–Ω–∏–º–∏ –¥–ª—è Playwright**.
                        - –£–Ω–∏–∫–∞–π –∑–∞–Ω–∞–¥—Ç–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∞–±–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ (—Ç–∏–ø—É `.ng-star-inserted`, `.active`, `.selected`).
                        –ü–æ–≤–µ—Ä–Ω–∏ **–ª–∏—à–µ –æ–±‚Äô—î–∫—Ç JSON** –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å —á–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.
                        """,
                    )
                    selectors = normalize_json(raw_selectors)
                    for product in parse["products"]:
                        url = product["link"]
                        await page.goto(url, timeout=60_000)
                        await page.wait_for_load_state("networkidle")
                        scraped_data = await extract_product_data(
                            html=await page.content(),
                            url=url,
                            selectors=selectors,
                            product_id=product_id,
                            platform_id=int(parse["platform_id"]),
                            position=int(product["search_position"]),
                        )
                        # characteristics_data = {}
                        # try:
                        #     if (
                        #         "characteristics" in selectors
                        #         and selectors["characteristics"]
                        #     ):
                        #         await page.click(
                        #             selectors["characteristics"], timeout=1000
                        #         )
                        #         await page.wait_for_load_state("networkidle")
                        #         raw_characteristics_json = (
                        #             await self.genai_service.analyze_page(
                        #                 page.url,
                        #                 """
                        #             –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –≤–∏—Ç—è–≥–Ω–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—É, —è–∫—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ '–Ω–∞–∑–≤–∞: –∑–Ω–∞—á–µ–Ω–Ω—è'. –°—Ñ–æ—Ä–º—É–π JSON-–æ–±‚Äô—î–∫—Ç —É —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ:
                        #             {
                        #             "characteristics": [
                        #                 {
                        #                 "name": "–ù–∞–∑–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 1",
                        #                 "value": "–ó–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 1"
                        #                 },
                        #                 {
                        #                 "name": "–ù–∞–∑–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 2",
                        #                 "value": "–ó–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 2"
                        #                 },
                        #                 ...
                        #             ]
                        #             }
                        #             üîπ **name** ‚Äî —Ü–µ –Ω–∞–∑–≤–∞ –∞–±–æ –µ—Ç–∏–∫–µ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ö–æ–ª—ñ—Ä', '–û–±'—î–º –ø–∞–º'—è—Ç—ñ', '–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ñ').
                        #             üîπ **value** ‚Äî —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ß–æ—Ä–Ω–∏–π', '256 –ì–ë', 'IPS').
                        #             ---
                        #             üéØ **–í–∏–º–æ–≥–∏ –¥–æ –≤–∏–±—ñ—Ä–∫–∏**:
                        #             - –ó–æ—Å–µ—Ä–µ–¥—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –±–ª–æ–∫–∞—Ö, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø–µ—Ä–µ–ª—ñ–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π –∞–±–æ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç—É.
                        #             - –Ü–≥–Ω–æ—Ä—É–π –±—É–¥—å-—è–∫—É —ñ–Ω—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: –∑–∞–≥–∞–ª—å–Ω—ñ –æ–ø–∏—Å–∏ –ø—Ä–æ–¥—É–∫—Ç—É, —Ä–µ–∫–ª–∞–º–Ω—ñ –±–ª–æ–∫–∏, –≤—ñ–¥–≥—É–∫–∏, —É–º–æ–≤–∏ –¥–æ—Å—Ç–∞–≤–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–æ—â–æ.
                        #             - –í–∏–±–∏—Ä–∞–π —Ç—ñ–ª—å–∫–∏ **–∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –≤–∏–¥–∏–º—ñ** —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
                        #             - –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∫–æ–∂–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –º–∞—î —è–∫ **–Ω–∞–∑–≤—É**, —Ç–∞–∫ —ñ **–∑–Ω–∞—á–µ–Ω–Ω—è**, —ñ —â–æ –≤–æ–Ω–∏ —Ç–æ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –æ–¥–Ω–∞ –æ–¥–Ω—ñ–π.
                        #             ---
                        #             üìå –ü–æ–≤–µ—Ä–Ω–∏ **–õ–ò–®–ï –û–ë'–Ñ–ö–¢ JSON** –±–µ–∑ –±—É–¥—å-—è–∫–∏—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —á–∏ —ñ–Ω—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –ó–±–µ—Ä–µ–∂–∏ —Ñ–æ—Ä–º–∞—Ç JSON –≤–∞–ª—ñ–¥–Ω–∏–º.
                        #             """,
                        #             )
                        #         )
                        #         characteristics_data = raw_characteristics_json
                        #         return characteristics_data
                        # except Exception as e:
                        #     print(
                        #         f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–±–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ó—Ö: {e}"
                        #     )
                        #     pass
                        # scraped_data.characteristics = characteristics_data.get(
                        #     "characteristics", []
                        # )
                        scraped_products.append(scraped_data)
        except Exception as e:
            raise HTTPException(
                status_code=400,
                detail=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ Playwright: {str(e)}",
            )
        finally:
            if browser is not None:
                await browser.close()

        return (
            await self.scraped_product_data_repository.bulk_create_scraped_product_data(
                scraped_products
            )
        )


ScrapeServiceDependency = Annotated[ScrapeService, Depends(ScrapeService)]
